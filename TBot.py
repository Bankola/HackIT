import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
import aiohttp
from datetime import datetime
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = "8155714124:AAGOK9riUWH1uIk0Gsr5NaXEuVNJWy3uDko"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
monitored_sites = {}
error_logs = {}


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")],
            [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")],
            [KeyboardButton(text="–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
async def check_site_availability(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                return response.status == 200, response.status
    except Exception as e:
        return False, str(e)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
async def add_site(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com):\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL
@dp.message(F.text.startswith(('http://', 'https://')))
async def process_url(message: types.Message):
    url = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    is_available, status = await check_site_availability(url)

    if is_available:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–π—Ç
        if user_id not in monitored_sites:
            monitored_sites[user_id] = []

        site_data = {
            'url': url,
            'added_date': datetime.now().isoformat(),
            'last_check': datetime.now().isoformat(),
            'status': 'online'
        }

        monitored_sites[user_id].append(site_data)

        await message.answer(
            f"‚úÖ –°–∞–π—Ç {url} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
            f"–°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω (–∫–æ–¥: {status})",
            reply_markup=get_main_keyboard()
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
        if user_id not in error_logs:
            error_logs[user_id] = []

        error_data = {
            'url': url,
            'timestamp': datetime.now().isoformat(),
            'error': f"–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å/–æ—à–∏–±–∫–∞: {status}",
            'type': 'connection_error'
        }

        error_logs[user_id].append(error_data)

        await message.answer(
            f"‚ùå –°–∞–π—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
            f"–û—à–∏–±–∫–∞: {status}\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data=f"add_anyway:{url}"),
                 InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_add")]
            ])
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
@dp.callback_query(F.data.startswith("add_anyway:"))
async def add_site_anyway(callback: types.CallbackQuery):
    url = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if user_id not in monitored_sites:
        monitored_sites[user_id] = []

    site_data = {
        'url': url,
        'added_date': datetime.now().isoformat(),
        'last_check': datetime.now().isoformat(),
        'status': 'offline'
    }

    monitored_sites[user_id].append(site_data)

    await callback.message.edit_text(
        f"‚ö†Ô∏è –°–∞–π—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å—Ç–∞—Ç—É—Å: –æ—Ñ—Ñ–ª–∞–π–Ω)"
    )
    await callback.answer()


@dp.callback_query(F.data == "cancel_add")
async def cancel_add(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö"
@dp.message(F.text == "–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")
async def show_errors(message: types.Message):
    user_id = message.from_user.id

    if user_id not in error_logs or not error_logs[user_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö.")
        return

    errors = error_logs[user_id][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫

    response = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
    for i, error in enumerate(errors, 1):
        timestamp = datetime.fromisoformat(error['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        response += f"{i}. {error['url']}\n"
        response += f"   –í—Ä–µ–º—è: {timestamp}\n"
        response += f"   –û—à–∏–±–∫–∞: {error['error']}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ"
@dp.message(F.text == "–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ")
async def show_site_data(message: types.Message):
    user_id = message.from_user.id

    if user_id not in monitored_sites or not monitored_sites[user_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∞–π—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for site in monitored_sites[user_id]:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=site['url'],
                callback_data=f"site_info:{site['url']}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∞–π—Ç–∞
@dp.callback_query(F.data.startswith("site_info:"))
async def show_specific_site_info(callback: types.CallbackQuery):
    url = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–π—Ç
    site = None
    for s in monitored_sites.get(user_id, []):
        if s['url'] == url:
            site = s
            break

    if not site:
        await callback.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    is_available, status = await check_site_availability(url)
    site['last_check'] = datetime.now().isoformat()
    site['status'] = 'online' if is_available else 'offline'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    added_date = datetime.fromisoformat(site['added_date']).strftime("%Y-%m-%d %H:%M:%S")
    last_check = datetime.fromisoformat(site['last_check']).strftime("%Y-%m-%d %H:%M:%S")

    response = f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ: {url}\n\n"
    response += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n"
    response += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
    response += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –û–Ω–ª–∞–π–Ω' if is_available else '‚ùå –û—Ñ—Ñ–ª–∞–π–Ω'}\n"

    if not is_available:
        response += f"üîß –ü—Ä–∏—á–∏–Ω–∞: {status}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–π—á–∞—Å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"check_now:{url}")]
    ])

    await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"
@dp.callback_query(F.data.startswith("check_now:"))
async def check_site_now(callback: types.CallbackQuery):
    url = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
    is_available, status = await check_site_availability(url)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for site in monitored_sites.get(user_id, []):
        if site['url'] == url:
            site['last_check'] = datetime.now().isoformat()
            site['status'] = 'online' if is_available else 'offline'
            break

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {url}:\n\n"
    response += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if is_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"

    if is_available:
        response += f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status}"
    else:
        response += f"–û—à–∏–±–∫–∞: {status}"

    await callback.answer(response, show_alert=True)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
@dp.message(Command("check_all"))
async def check_all_sites(message: types.Message):
    user_id = message.from_user.id

    if user_id not in monitored_sites or not monitored_sites[user_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤...")

    results = []
    for site in monitored_sites[user_id]:
        is_available, status = await check_site_availability(site['url'])
        site['last_check'] = datetime.now().isoformat()
        site['status'] = 'online' if is_available else 'offline'

        status_emoji = "‚úÖ" if is_available else "‚ùå"
        results.append(f"{status_emoji} {site['url']} - {'–î–æ—Å—Ç—É–ø–µ–Ω' if is_available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

    response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤:\n\n" + "\n".join(results)
    await message.answer(response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
@dp.message(Command("sites"))
async def list_sites(message: types.Message):
    user_id = message.from_user.id

    if user_id not in monitored_sites or not monitored_sites[user_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.")
        return

    response = "üìã –í–∞—à–∏ —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
    for i, site in enumerate(monitored_sites[user_id], 1):
        last_check = datetime.fromisoformat(site['last_check']).strftime("%Y-%m-%d %H:%M")
        status_emoji = "‚úÖ" if site['status'] == 'online' else "‚ùå"
        response += f"{i}. {status_emoji} {site['url']}\n   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/check_all - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã\n"
        "/sites - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã",
        reply_markup=get_main_keyboard()
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
