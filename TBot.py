import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
import aiohttp
from datetime import datetime
import os
from dotenv import load_dotenv
from Database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
db = Database()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup():
    await db.create_tables()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")],
            [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")],
            [KeyboardButton(text="–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ")],
            [KeyboardButton(text="–ú–æ–∏ —Å–∞–π—Ç—ã"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
async def check_site_availability(url):
    try:
        start_time = datetime.now()
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                end_time = datetime.now()
                response_time = (end_time - start_time).total_seconds()
                return True, response.status, response_time
    except Exception as e:
        return False, str(e), 0


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
async def add_site(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com):\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL
@dp.message(F.text.startswith(('http://', 'https://')))
async def process_url(message: types.Message):
    url = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å–∞–π—Ç
    existing_site = await db.get_site_by_url(user_id, url)
    if existing_site:
        await message.answer("‚ùå –≠—Ç–æ—Ç —Å–∞–π—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    is_available, status, response_time = await check_site_availability(url)

    if is_available:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        site_id = await db.add_site(user_id, url)
        await db.update_site_status(site_id, 'online', status)

        await message.answer(
            f"‚úÖ –°–∞–π—Ç {url} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
            f"–°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω (–∫–æ–¥: {status})\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –°–∞–π—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
            f"–û—à–∏–±–∫–∞: {status}\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data=f"add_anyway:{url}"),
                 InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_add")]
            ])
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
@dp.callback_query(F.data.startswith("add_anyway:"))
async def add_site_anyway(callback: types.CallbackQuery):
    url = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    site_id = await db.add_site(user_id, url)
    await db.update_site_status(site_id, 'offline')
    await db.add_error(user_id, site_id, 'connection_error', '–°–∞–π—Ç –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏')

    await callback.message.edit_text(
        f"‚ö†Ô∏è –°–∞–π—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å—Ç–∞—Ç—É—Å: –æ—Ñ—Ñ–ª–∞–π–Ω)"
    )
    await callback.answer()


@dp.callback_query(F.data == "cancel_add")
async def cancel_add(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö"
@dp.message(F.text == "–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")
async def show_errors(message: types.Message):
    user_id = message.from_user.id

    errors = await db.get_site_errors(user_id, limit=10)

    if not errors:
        await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        return

    response = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
    for i, error in enumerate(errors, 1):
        timestamp = datetime.fromisoformat(error['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        response += f"{i}. {error['url']}\n"
        response += f"   –í—Ä–µ–º—è: {timestamp}\n"
        response += f"   –û—à–∏–±–∫–∞: {error['error_message']}\n"
        response += f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–µ—à–µ–Ω–∞' if error['resolved'] else '‚ùå –ê–∫—Ç–∏–≤–Ω–∞'}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ"
@dp.message(F.text == "–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ")
async def show_site_data(message: types.Message):
    user_id = message.from_user.id

    sites = await db.get_user_sites(user_id)

    if not sites:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∞–π—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for site in sites:
        status_emoji = "‚úÖ" if site['status'] == 'online' else "‚ùå"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status_emoji} {site['url']}",
                callback_data=f"site_info:{site['id']}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∞–π—Ç–∞
@dp.callback_query(F.data.startswith("site_info:"))
async def show_specific_site_info(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
    sites = await db.get_user_sites(user_id)
    site = next((s for s in sites if s['id'] == site_id), None)

    if not site:
        await callback.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    is_available, status, response_time = await check_site_availability(site['url'])
    new_status = 'online' if is_available else 'offline'
    await db.update_site_status(site_id, new_status, status if is_available else None)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_site_stats(site_id)

    added_date = datetime.fromisoformat(site['added_date']).strftime("%Y-%m-%d %H:%M:%S")
    last_check = datetime.fromisoformat(site['last_check']).strftime("%Y-%m-%d %H:%M:%S")

    response = f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ: {site['url']}\n\n"
    response += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n"
    response += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
    response += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –û–Ω–ª–∞–π–Ω' if is_available else '‚ùå –û—Ñ—Ñ–ª–∞–π–Ω'}\n"

    if is_available:
        response += f"‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫\n"
        response += f"üî¢ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status}\n"
    else:
        response += f"üîß –ü—Ä–∏—á–∏–Ω–∞: {status}\n"

    response += f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    response += f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['total_checks']}\n"
    response += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success_checks']}\n"
    response += f"   –û—à–∏–±–æ–∫: {stats['error_count']}\n"
    response += f"   Uptime: {stats['uptime_percentage']:.1f}%\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"check_now:{site_id}"),
         InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç", callback_data=f"delete_site:{site_id}")],
        [InlineKeyboardButton(text="üìä –û—à–∏–±–∫–∏ —Å–∞–π—Ç–∞", callback_data=f"site_errors:{site_id}")]
    ])

    await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()


@dp.message(F.text == "–ú–æ–∏ —Å–∞–π—Ç—ã")
async def list_sites(message: types.Message):
    user_id = message.from_user.id

    sites = await db.get_user_sites(user_id)

    if not sites:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.")
        return

    response = "üìã –í–∞—à–∏ —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
    for i, site in enumerate(sites, 1):
        last_check = datetime.fromisoformat(site['last_check']).strftime("%Y-%m-%d %H:%M")
        status_emoji = "‚úÖ" if site['status'] == 'online' else "‚ùå"
        response += f"{i}. {status_emoji} {site['url']}\n"
        response += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        response += f"   –°—Ç–∞—Ç—É—Å: {site['status']}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id

    sites = await db.get_user_sites(user_id)

    if not sites:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    response = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"

    total_sites = len(sites)
    online_sites = sum(1 for site in sites if site['status'] == 'online')
    offline_sites = total_sites - online_sites

    response += f"üåê –í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤: {total_sites}\n"
    response += f"‚úÖ –û–Ω–ª–∞–π–Ω: {online_sites}\n"
    response += f"‚ùå –û—Ñ—Ñ–ª–∞–π–Ω: {offline_sites}\n"
    response += f"üìà Uptime: {(online_sites / total_sites * 100):.1f}%\n\n"

    response += "–°–∞–π—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É:\n"
    for site in sites:
        status_emoji = "‚úÖ" if site['status'] == 'online' else "‚ùå"
        response += f"{status_emoji} {site['url']}\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"
@dp.callback_query(F.data.startswith("check_now:"))
async def check_site_now(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
    sites = await db.get_user_sites(callback.from_user.id)
    site = next((s for s in sites if s['id'] == site_id), None)

    if not site:
        await callback.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
    is_available, status, response_time = await check_site_availability(site['url'])
    new_status = 'online' if is_available else 'offline'
    await db.update_site_status(site_id, new_status, status if is_available else None)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {site['url']}:\n\n"
    response += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if is_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"

    if is_available:
        response += f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status}\n"
        response += f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫"
    else:
        response += f"–û—à–∏–±–∫–∞: {status}"
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_error(callback.from_user.id, site_id, 'connection_error', str(status))

    await callback.answer(response, show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç"
@dp.callback_query(F.data.startswith("delete_site:"))
async def delete_site_handler(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    site = await db.get_site_by_id(site_id)
    if not site:
        await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∞–π—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if site['user_id'] != user_id:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞!")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç?\n\n"
        f"URL: {site['url']}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{site_id}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete:{site_id}")]
        ])
    )
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞
@dp.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_site(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    site = await db.get_site_by_id(site_id)
    if not site:
        await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –£–¥–∞–ª—è–µ–º —Å–∞–π—Ç
    success = await db.delete_site(user_id, site_id)

    if success:
        await callback.message.edit_text(
            f"‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            f"URL: {site['url']}\n\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ."
        )
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞
@dp.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete_site(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–π—Ç–µ
    sites = await db.get_user_sites(callback.from_user.id)
    site = next((s for s in sites if s['id'] == site_id), None)

    if not site:
        await callback.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    is_available, status, response_time = await check_site_availability(site['url'])
    new_status = 'online' if is_available else 'offline'
    await db.update_site_status(site_id, new_status, status if is_available else None)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_site_stats(site_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    added_date = datetime.fromisoformat(site['added_date']).strftime("%Y-%m-%d %H:%M:%S")
    last_check = datetime.fromisoformat(site['last_check']).strftime("%Y-%m-%d %H:%M:%S")

    response = f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ: {site['url']}\n\n"
    response += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n"
    response += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
    response += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –û–Ω–ª–∞–π–Ω' if is_available else '‚ùå –û—Ñ—Ñ–ª–∞–π–Ω'}\n"

    if is_available:
        response += f"‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫\n"
        response += f"üî¢ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status}\n"
    else:
        response += f"üîß –ü—Ä–∏—á–∏–Ω–∞: {status}\n"

    response += f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    response += f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['total_checks']}\n"
    response += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success_checks']}\n"
    response += f"   –û—à–∏–±–æ–∫: {stats['error_count']}\n"
    response += f"   Uptime: {stats['uptime_percentage']:.1f}%\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"check_now:{site_id}"),
         InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç", callback_data=f"delete_site:{site_id}")],
        [InlineKeyboardButton(text="üìä –û—à–∏–±–∫–∏ —Å–∞–π—Ç–∞", callback_data=f"site_errors:{site_id}")]
    ])

    await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—à–∏–±–∫–∏ —Å–∞–π—Ç–∞"
@dp.callback_query(F.data.startswith("site_errors:"))
async def show_site_errors(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
    site = await db.get_site_by_id(site_id)
    if not site:
        await callback.answer("‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∞–π—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if site['user_id'] != user_id:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
    errors = await db.get_site_errors(user_id, site_id=site_id, limit=5)

    if not errors:
        response = f"‚úÖ –î–ª—è —Å–∞–π—Ç–∞ {site['url']} –Ω–µ—Ç –æ—à–∏–±–æ–∫!\n\n"
        response += "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º —Å —ç—Ç–∏–º —Å–∞–π—Ç–æ–º."

        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=f"site_info:{site_id}")]
            ])
        )
    else:
        response = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–∞–π—Ç–∞: {site['url']}\n\n"

        for i, error in enumerate(errors, 1):
            timestamp = datetime.fromisoformat(error['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
            status_emoji = "‚úÖ" if error['resolved'] else "‚ùå"
            response += f"{i}. {timestamp}\n"
            response += f"   –¢–∏–ø: {error['error_type']}\n"
            response += f"   –û—à–∏–±–∫–∞: {error['error_message']}\n"
            response += f"   –°—Ç–∞—Ç—É—Å: {status_emoji} {'–†–µ—à–µ–Ω–∞' if error['resolved'] else '–ê–∫—Ç–∏–≤–Ω–∞'}\n\n"

        response += f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(errors)}"

        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=f"site_info:{site_id}"),
                 InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏", callback_data=f"clear_errors:{site_id}")]
            ])
        )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏"
@dp.callback_query(F.data.startswith("clear_errors:"))
async def clear_site_errors(callback: types.CallbackQuery):
    site_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ —Å–∞–π—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–µ
    async with aiosqlite.connect('monitoring_bot.db') as conn:
        await conn.execute(
            'UPDATE errors SET resolved = 1 WHERE site_id = ? AND user_id = ?',
            (site_id, user_id)
        )
        await conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
    site = await db.get_site_by_id(site_id)

    await callback.message.edit_text(
        f"‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞ {site['url']} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–µ!\n\n"
        f"–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=f"site_info:{site_id}")]
        ])
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())